Prerequisite :

* ENSURE PIPELINE NAME :

jen-git-dkr-iEcr-eb



Install all jenkins by default plugins :



—-------------------------------
 
Step 1 :

Create Ubuntu, 20.04 LTS t2.medium : then 

sudo su -

Install docker & Prerequisite

UPDATE :

vi update.sh

#!/bin/sh
 sudo apt update
sudo apt-get install -y build-essential zlib1g-dev libssl-dev libncurses-dev libffi-dev libsqlite3-dev libreadline-dev libbz2-dev
 sudo apt-get update && sudo apt-get dist-upgrade
sudo apt update -y
 sudo apt install build-essential -y
 sudo apt-get install manpages-dev -y
  sudo apt-get install libssl-dev -y
  sudo apt-get install bzip2 -y
  sudo apt-get install -y libffi-dev
#END

sudo chmod +x update.sh

./update.sh

ubuntu docker install :
vi docker.sh

#!/bin/sh
echo "THIS IS sudo apt-get update -y -=-=-=-=-=-=-=-=-=-=-=-=-=434343434-3=4-3=4-3=-3=4-3=4-3=-43=4-3=-=3-4=3========================== "
sudo apt-get update -y
echo "THIS IS sudo apt-get install openjdk-8-jdk -y -=-=-=-=-=-=-=-=-=-=-=-=-=434343434-3=4-3=4-3=-3=4-3=4-3=-43=4-3=-=3-4=3==================== "
sudo apt-get install openjdk-8-jdk -y
sudo java -version
echo "check here match the path or not ====================34534=535=345=345=345345=34=534=534=534=5345=ERROR============534534534345"
sudo readlink -f $(which java)
echo "check here match the path or not ====================34534=535=345=345=345345=34=534=534=534=5345=ERROR============534534534345"
JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
echo $JAVA_HOME
export JAVA_HOME
PATH=$PATH:$JAVA_HOME
echo "now DOCKER =============3434=============343=4=========34=34==============43=43==============4343=4========34=3=4"
sudo apt update -y
sudo apt upgrade -y
sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
echo "THIS IS sudo apt update -y -=-=-=-=-=-=-=-=-=-=-=-=-=434343434-3=4-3=4-3=-3=4-3=4-3=-43=4-3=-=3-4=3==================== "
sudo apt update -y
sudo apt-cache policy docker-ce
sudo apt install docker-ce -y
sudo usermod -aG docker ubuntu
docker info
sudo chmod 777 /var/run/docker.sock
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
echo "now unzip=============3434=============343=4=========34=34==============43=43==============4343=4========34=3=4"
echo " sudo apt-get update -y=============3434=============343=4=========34=34==============43=43==============4343=4========34=3=4"
sudo apt-get update -y
sudo apt-get install -y unzip
echo "docker --version=============6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6="
docker --version
echo "docker-compose --version=========6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6="
docker-compose --version
git --version
echo "check ALL VERSION===============6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6=6="
echo "YOYO MAN YOU DID A BIG JOB CHEEERS!!!!!"
#END

sudo chmod +x docker.sh

./docker.sh


Ubuntu jenkins install :

vi ubuntu.sh

#!/bin/sh
sudo apt-get update -y
echo "THIS IS sudo apt-get update -y -=-=-=-=-=-=-=-=-=-=-=-=-=434343434-3=4-3=4-3=-3=4-3=4-3=-43=4-3=-=3-4=3========================== "
sudo apt-get update -y
echo "THIS IS sudo apt-get install openjdk-8-jdk -y -=-=-=-=-=-=-=-=-=-=-=-=-=434343434-3=4-3=4-3=-3=4-3=4-3=-43=4-3=-=3-4=3==================== "
sudo apt-get install openjdk-8-jdk -y
sudo java -version
echo "check here match the path or not ====================34534=535=345=345=345345=34=534=534=534=5345=ERROR============534534534345"
sudo readlink -f $(which java)
echo "check here match the path or not ====================34534=535=345=345=345345=34=534=534=534=5345=ERROR============534534534345"
JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
echo $JAVA_HOME
export JAVA_HOME
PATH=$PATH:$JAVA_HOME
sudo wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \
    /etc/apt/sources.list.d/jenkins.list'
echo "THIS IS sudo apt-get update -y -=-=-=-=-=-=-=-=-=-=-=-=-=434343434-3=4-3=4-3=-3=4-3=4-3=-43=4-3=-=3-4=3==================== "
sudo apt-get update -y
echo "THIS IS sudo apt-get"
sudo apt-get install jenkins -y
sudo service jenkins start
sudo systemctl enable jenkins
sudo service sshd restart
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
#END

:wq

sudo chmod +x  ubuntu.sh

./ubuntu.sh

PYTHON3 INSTALLATION :

vi python3.sh
        #!/bin/bash
            cd /opt
            sudo wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz
             sudo tar -xvzf Python-3.7.0.tgz
             cd /opt/Python-3.7.0
            sudo ./configure
            sudo make
            sudo make altinstall
            cd /usr/local/bin/
            sudo ln -s /usr/bin/python3 /usr/bin/python
            sudo ln -s pip3.7 pip3
 	rm -rf Python-3.7.0.tgz


            echo "--------------------------------------------------------------------------python3 --version"


            python3 --version
            
            echo "* *********************************************************** *"
   #END

:wq

sudo chmod +x  python3.sh


./python3.sh

Aws-elastic-beanstalk-cli-setup :
 

vi  Aws-elastic-beanstalk-cli-setup.sh


#!/bin/bash
git clone https://github.com/aws/aws-elastic-beanstalk-cli
            echo "hippo---------------docker image ls---------------------------------------ONE"
            sudo pip3 uninstall -y virtualenv
            echo "hippo---------------docker image ls---------------------------------------TWO"
            sudo pip3 install virtualenv
            echo "hippo---------------docker image ls---------------------------------------THREE"
             echo "hippo---------------docker image ls---------------------------------------FOUR"
             cd aws-elastic-beanstalk-cli
            sudo pip3 install --upgrade pip
            sudo pip3 install .
sudo rm -rf aws-elastic-beanstalk-cli
 eb --version
  #END



:wq

sudo chmod +x  Aws-elastic-beanstalk-cli-setup.sh



./Aws-elastic-beanstalk-cli-setup.sh




sudo su -

sudo chmod 777 /var/run/docker.sock

apt install awscli
apt install zip



sudo su - jenkins -s/bin/bash
 or
sudo -su jenkins 
Pwd : /var/lib/jenkins
Whoami: jenkins

aws configure --profile terraform



ssh-keygen

cd .ssh

cat id_rsa.pub

copy the public key and the paste the bitbucket, 
below image path

git ls-remote -h -- git@bitbucket.org:aiyubalikhan92/docker-ecr.git HEAD

git ls-remote -h -- git@bitbucket.org:aiyubalikhan92/docker-ecr.git HEAD


git@bitbucket.org:aiyubalikhan92/docker-ecr.git

 
 
Create pipeline :


Ensure repo name and branch :




Save : then

** goto bitbucket and choose your branch then change all place to :

Aws account number 
Git url 


—-----------------------------------------------------------------------------

pipeline {
   agent any
   environment {
      registry = "087019994649.dkr.ecr.ap-southeast-1.amazonaws.com/testrepo:$BUILD_NUMBER"
   }
  
  // cloning repository
 
    stages {
       stage('Cloning Git') {
           steps {
           git branch: 'jen-git-dkr-iEcr-eb',  url: 'git@bitbucket.org:aiyubalikhan92/docker-ecr.git'
           sh 'ls'
           sh 'pwd'
    }
       }
  stage('Docker Login initial') {
     steps {
       sh '''
          set +x
        
          aws ecr get-login-password --region ap-southeast-1 --profile terraformadmin | docker login --username AWS --password-stdin 087019994649.dkr.ecr.ap-southeast-1.amazonaws.com
          echo "login success"
       '''
     }
   }
  
        // Building Docker images
stage('Building image'){
     steps {
       sh '''
            # echo "$registry"
              docker build --no-cache -t 087019994649.dkr.ecr.ap-southeast-1.amazonaws.com/testrepo:$BUILD_NUMBER .
            echo "done"
       '''
     }
   }
    //  Docker Push AWS ECR
  
    stage('Docker Push'){
     steps {
       sh '''
          set +x
          docker push 087019994649.dkr.ecr.ap-southeast-1.amazonaws.com/testrepo:$BUILD_NUMBER
       '''
     }
   }
  
   // Docker Clean
  
  stage('Docker Clean'){
     steps {
      sh '''
          set +x
          docker rmi 087019994649.dkr.ecr.ap-southeast-1.amazonaws.com/testrepo:$BUILD_NUMBER
      '''
    }
   }
 
 
 
 stage('Docker updating') {
     steps{
       script {
         sh '''
           set +x   
  pwd
           touch docker-compose.yml
           echo "version: '3.8'" >> docker-compose.yml
           echo "two"
           echo "services:" >> docker-compose.yml
           echo "  main-application:" >> docker-compose.yml
           echo '    image: "796754402958.dkr.ecr.ap-southeast-1.amazonaws.com/testrepo:$BUILD_NUMBER"' >> docker-compose.yml
           echo '    env_file:' >> docker-compose.yml
           echo '      - .env' >> docker-compose.yml
           echo "    ports:" >> docker-compose.yml
           echo '      - "80:80"' >> docker-compose.yml
           >> ~/.bash_profile
         
           eb --version
           eb init --region ap-southeast-1 --platform Docker Jen-Git-Dkr-zips3-EB --profile terraformadmin
           eb use Jengitdkrzips3eb-env --region ap-southeast-1 --profile terraformadmin
           echo "updating"
           eb deploy Jengitdkrzips3eb-env --region ap-southeast-1 --profile terraformadmin
           echo "over"
           '''
          }
      }   
     }
    
     stage('Docker LIST'){
     steps {
       sh '''
          set +x
        
          echo "hippo---------------docker image ls---------------------------------------hippo"
          docker image ls  
          echo "hippo---------------------------------------END--------------------------------hippo"
         
          echo "hippo--------------------------------List-ECR-IMAGES-------------------------hippo"
          aws ecr list-images --repository-name testrepo --region ap-southeast-1 --profile terraformadmin
           echo "hippo------------------------List-ECR-IMAGES--END---------------------------------hippo"
         
          echo "hippo-------------------------------------------delete last ecr image --------------------hippo"
           aws ecr batch-delete-image --repository-name testrepo --image-ids imageTag=$BUILD_NUMBER  --region ap-southeast-1 --profile terraformadmin
           echo "hippo----------------------------------------delete last ecr image --END-------------hippo"
         
           echo "hippo----------------------------docker ps---------hippo"
           docker ps
           echo "hippo---------------------------------------docker ps----END-------------hippo"
 
           echo "hippo------------------------------------- docker container ls --END-------------hippo"
           docker container ls
           echo "hippo--------------------------------------- docker container ls --END-------------hippo"
       '''
     }
   }
  
  
    
   } 
}
 
 









—-----------------------------------------------------------------------------
